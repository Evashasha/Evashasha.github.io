<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>curry函数(柯里化)</title>
      <link href="/2020/03/05/curry/"/>
      <url>/2020/03/05/curry/</url>
      
        <content type="html"><![CDATA[<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul><li>curry化是一切的基础，curry化是为了解决函数式编程时遇到的状态转换时需要的单参数需求。不过现在很多时候也用于延时执行，和插件编写。</li><li>柯里化实际上是这样的一个转换过程：把接受多个参数的函数变换成接受一个单一参数(译注：最初函数的第一个参数)的函数，如果其他的参数是必要的，返回接受余下的参数且返回结果的新函数。<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//curry函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//固定参数</span></span><br><span class="line">    <span class="keyword">let</span> fixed_args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)||[];</span><br><span class="line">        args = fixed_args.concat(args);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********************************************************************************</span></span><br><span class="line"><span class="comment">*curry函数使用场景</span></span><br><span class="line"><span class="comment">*使用场景1：url组合，很多时候我们需要拼接protocal domain 和 path,</span></span><br><span class="line"><span class="comment">*大多数时候protocal和domain是不变的，但是如果</span></span><br><span class="line"><span class="comment">*使用字符串拼接会出现很多的废代码，写死会出现无法修改的情况，这个时候curry函数就有用武之地了，</span></span><br><span class="line"><span class="comment">*所以curry在这个场景下的意义是灵活性</span></span><br><span class="line"><span class="comment">*************************************************************************************/</span></span><br><span class="line"><span class="keyword">let</span> $baiduCurry = curry(<span class="function"><span class="keyword">function</span>(<span class="params">protocal,domain,path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;protocal&#125;</span>://<span class="subst">$&#123;domain&#125;</span><span class="subst">$&#123;path&#125;</span>`</span>;</span><br><span class="line">&#125;,<span class="string">"https"</span>,<span class="string">"www.baidu.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( $baiduCurry(<span class="string">"/images"</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( $baiduCurry(<span class="string">"/books"</span>) );</span><br><span class="line"><span class="comment">//https://www.baidu.com/images</span></span><br><span class="line"><span class="comment">//https://www.baidu.com/books</span></span><br><span class="line"><span class="comment">/*******************************************************</span></span><br><span class="line"><span class="comment">*使用场景2：将柯里化后的callback参数传递给map, filter等函数。</span></span><br><span class="line"><span class="comment">*虽然看起来有点多余，但是这里person_curry的方法是可以反复使用</span></span><br><span class="line"><span class="comment">*的,如果下次你想写一个所有age字段的集合函数，就节省下来了大堆</span></span><br><span class="line"><span class="comment">*的代码，所以curry在这个场景下的意义是代码复用性</span></span><br><span class="line"><span class="comment">********************************************************/</span></span><br><span class="line"><span class="keyword">let</span> persons = [&#123;<span class="attr">name</span>:<span class="string">"hcj1"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"hcj2"</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"hcj3"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> person_curry = curry(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> names = persons.map(person_curry(<span class="string">"name"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(names);</span><br><span class="line"><span class="comment">// ["hcj1", "hcj2", "hcj3"]</span></span><br></pre></td></tr></table></figure>原文：<a href="https://blog.csdn.net/huangssssx/article/details/86698256" target="_blank" rel="noopener">柯里化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些javascript小技巧</title>
      <link href="/2020/03/05/javascript-tips/"/>
      <url>/2020/03/05/javascript-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="vs"><a href="#vs" class="headerlink" title="=== vs =="></a>=== vs ==</h2><p>==（或者!=）做对比的时候会将进行对比的两者转换到同一类型再比较。===（或者!==）则不会，他会将进行对比的两者做类型对比和值对比，相对于 == ，=== 的对比会更加严谨。</p><blockquote><p>[10] == 10 // true<br>[10] === 10 // false<br>“10” == 10 // true<br>“10” === 10 // false<br>[] == 0 // true<br>[] === 0 // false<br>“” == false // true 但是 true == “a” 是false<br>“” === false // false</p></blockquote><h2 id="字符串转换成数值的方法"><a href="#字符串转换成数值的方法" class="headerlink" title="字符串转换成数值的方法"></a>字符串转换成数值的方法</h2><p>示例 +”1” // 1  +”-2” //-2 -“1” //-1</p><h2 id="清空一个数组"><a href="#清空一个数组" class="headerlink" title="清空一个数组"></a>清空一个数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//清空数组</span></span><br><span class="line">    list = [];</span><br><span class="line">&#125;</span><br><span class="line">empty();</span><br></pre></td></tr></table></figure><p>下面这种性能更高：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//清空数组</span></span><br><span class="line">    list.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">empty();</span><br></pre></td></tr></table></figure><br>· list =[] 将一个变量指定个引用到那个数组，而其他引用都不受影响。这意味着，对于先前数组的内容的引用仍然保留在内存中，从而导致内存泄漏。<br>· list.length = 0 删除数组内的所有东西，这不需要引用任何其他的东西</p><h2 id="对数组排序进行”洗牌”-随机排序"><a href="#对数组排序进行”洗牌”-随机排序" class="headerlink" title="对数组排序进行”洗牌”(随机排序)"></a>对数组排序进行”洗牌”(随机排序)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i,</span><br><span class="line">    j,</span><br><span class="line">    temp;</span><br><span class="line">    <span class="keyword">for</span> (i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> b = shuffle(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// [2, 7, 8, 6, 5, 3, 1, 4]</span></span><br></pre></td></tr></table></figure><h2 id="返回对象的函数能够用于链式操作"><a href="#返回对象的函数能够用于链式操作" class="headerlink" title="返回对象的函数能够用于链式操作"></a>返回对象的函数能够用于链式操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello my name is: "</span>, <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.changeName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"John"</span>);</span><br><span class="line">person.sayName().changeName(<span class="string">"Timmy"</span>).sayName();</span><br><span class="line"><span class="comment">//Hello my name is: John</span></span><br><span class="line"><span class="comment">//Hello my name is: Timmy</span></span><br></pre></td></tr></table></figure><h2 id="字符串安全连接"><a href="#字符串安全连接" class="headerlink" title="字符串安全连接"></a>字符串安全连接</h2><p>假设你有一些类型未知的变量，你想将它们连接起来。可以肯定的是，算法操作不会在级联时应用:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> one = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> two = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> three = <span class="string">'3'</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">''</span>.concat(one, two, three); <span class="comment">//"123"</span></span><br></pre></td></tr></table></figure><br>对join和concat进行比较，他们的执行速度是几乎一样的。</p><h2 id="更快的四舍五入"><a href="#更快的四舍五入" class="headerlink" title="更快的四舍五入"></a>更快的四舍五入</h2><p><del>，也叫double NOT运算符。你可以更快的使用它来作为Math.floor()替代品。<br>单位移~将32位转换输入-(输入+1)，因此双位移将输入转换为-(-(输入+1))，这是个趋于0的伟大的工具。对于输入的数字，它将模仿Math.ceil()取负值和Math.floor()取正值。如果执行失败，则返回0，这可能在用来代替Math.floor()失败时返回一个NaN的时候发挥作用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单位移</span></span><br><span class="line"><span class="built_in">console</span>.log(~<span class="number">1337</span>) <span class="comment">// -1338</span></span><br><span class="line"><span class="comment">// 双位移</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">47.11</span>) <span class="comment">// -&gt; 47</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">-12.88</span>) <span class="comment">// -&gt; -12</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">1.9999</span>) <span class="comment">// -&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">3</span>) <span class="comment">// -&gt; 3</span></span><br><span class="line"><span class="comment">//失败的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(~~[]) <span class="comment">// -&gt; 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="literal">NaN</span>) <span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="literal">null</span>) <span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="comment">//大于32位整数则失败</span></span><br><span class="line"><span class="built_in">console</span>.log(~~(<span class="number">2147483647</span> + <span class="number">1</span>) === (<span class="number">2147483647</span> + <span class="number">1</span>)) <span class="comment">// -&gt; 0</span></span><br></pre></td></tr></table></figure><br>虽然</del>可能有更好的表现，为了可读性，请使用Math.floor()。</p><h2 id="给回调函数传递参数"><a href="#给回调函数传递参数" class="headerlink" title="给回调函数传递参数"></a>给回调函数传递参数</h2><p>在默认情况下，你无法将参数传给回调函数，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi human'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'someelem'</span>).addEventListener(<span class="string">'click'</span>, callback);</span><br></pre></td></tr></table></figure><br>可以采取JavaScript闭包的优点来给回调函数传参（curry function）,如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'sum = '</span>, (a+b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'someelem'</span>).addEventListener(<span class="string">'click'</span>, callback(x, y));</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alertText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    alert(text);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'someelem'</span>).addEventListener(<span class="string">'click'</span>, alertText.bind(<span class="keyword">this</span>, <span class="string">'hello'</span>));</span><br></pre></td></tr></table></figure></p><blockquote><p>bind:<br>javascript1.8.5版本中原生实现了此方法，目前IE9+，ff4+，chrome7+支持此方法，opera和safari不支持（MDN上的说明）。<br>bind的作用和apply，call类似都是改变函数的execute context，也就是 runtime 时 this 关键字的指向。但是使用方法略有不同。一个函数进行bind后可稍后执行。<br>bind 方法实现原理：绑定this  和 Currying：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConfig</span>(<span class="params">colors,size,otherOptions</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="built_in">console</span>.log(colors,size,otherOptions)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultConfig = getConfig.bind(<span class="literal">null</span>,<span class="string">"#f00"</span>,<span class="string">"1024*768"</span>);</span><br><span class="line"></span><br><span class="line">defaultConfig(<span class="string">"123"</span>);　　<span class="comment">//#f00 1024*768 123</span></span><br><span class="line"></span><br><span class="line">defaultConfig(<span class="string">"345"</span>);　　<span class="comment">//#f00 1024*768 345</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为bind 方法是EMS5 以后提出的方法，对于老的浏览器，可以使用手写一个bind 方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Function</span>.prototype.bind)&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">oThis</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">if</span>(typeOf <span class="keyword">this</span> !== <span class="string">'function'</span>)&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'What is trying to be bound is not callable'</span>)</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">　　　　　　fToBind = <span class="keyword">this</span>,</span><br><span class="line"></span><br><span class="line">　　　　　　fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">　　　　　　fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　　　<span class="keyword">return</span> fToBind.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP?<span class="keyword">this</span>:oThis,</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　aArgs.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line"></span><br><span class="line">　　　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　fNOP.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line"></span><br><span class="line">　　　　fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> fBound;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="在数组插入一个项"><a href="#在数组插入一个项" class="headerlink" title="在数组插入一个项"></a>在数组插入一个项</h2><p>使用push在数组的末尾添加元素，使用unshift在开始的位置，或者在中间使用splice。<br>push:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.push(<span class="number">6</span>);</span><br><span class="line">arr[arr.length] = <span class="number">6</span>; <span class="comment">//在Chrome 47.0.2526.106 (Mac OS X 10.11.1)上提高了 43% 的速度</span></span><br></pre></td></tr></table></figure><br>unshift:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ar arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.unshift(<span class="number">0</span>);</span><br><span class="line">[<span class="number">0</span>].concat(arr); <span class="comment">//在Chrome 47.0.2526.106 (Mac OS X 10.11.1)上提高了 98% 的速度`</span></span><br></pre></td></tr></table></figure><br>unshift编辑原有的数组，concat返回一个新数组</p><h2 id="改善嵌套条件"><a href="#改善嵌套条件" class="headerlink" title="改善嵌套条件"></a>改善嵌套条件</h2><p>if语句嵌套。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (color) &#123;</span><br><span class="line">    <span class="keyword">if</span> (color === <span class="string">'black'</span>) &#123;</span><br><span class="line">        printBlackBackground();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'red'</span>) &#123;</span><br><span class="line">        printRedBackground();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'blue'</span>) &#123;</span><br><span class="line">        printBlueBackground();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color === <span class="string">'green'</span>) &#123;</span><br><span class="line">        printGreenBackground();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printYellowBackground();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>一个改善的办法是用switch语句代替嵌套的if语句。虽然它是更加简洁，更加有序，但不推荐这样做，因为很难debug。这里指出原因。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'black'</span>:</span><br><span class="line">        printBlackBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">        printRedBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'blue'</span>:</span><br><span class="line">        printBlueBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'green'</span>:</span><br><span class="line">        printGreenBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        printYellowBackground();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但是，当我们有多个判断条件的情况下呢？在这种情况下，如果我们想让它更加简洁，更加有序，我们可以使用switch。如果我们将true的作为一个参数传递给该switch语句，它可以让我们在每一个情况下放置一个条件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'black'</span>):</span><br><span class="line">        printBlackBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'red'</span>):</span><br><span class="line">        printRedBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'blue'</span>):</span><br><span class="line">        printBlueBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'green'</span>):</span><br><span class="line">        printGreenBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> (<span class="keyword">typeof</span> color === <span class="string">'string'</span> &amp;&amp; color === <span class="string">'yellow'</span>):</span><br><span class="line">        printYellowBackground();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但我们必须避免在每一个条件下进行多次检查，尽量避免使用switch。我们也必须考虑到最有效的方法是通过一个object。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colorObj = &#123;</span><br><span class="line">    <span class="string">'black'</span>: printBlackBackground,</span><br><span class="line">    <span class="string">'red'</span>: printRedBackground,</span><br><span class="line">    <span class="string">'blue'</span>: printBlueBackground,</span><br><span class="line">    <span class="string">'green'</span>: printGreenBackground,</span><br><span class="line">    <span class="string">'yellow'</span>: printYellowBackground</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (color <span class="keyword">in</span> colorObj) &#123;</span><br><span class="line">    colorObj[color]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="以非ASCII字符形式来排序字符串"><a href="#以非ASCII字符形式来排序字符串" class="headerlink" title="以非ASCII字符形式来排序字符串"></a>以非ASCII字符形式来排序字符串</h2><p>JavaScript有个原生的方法对字符串格式的数组进行排序，做一个简单的array.sort()将会把字符串们按首字母的数序排列。当然，也可以提供自定义排序功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Shanghai'</span>, <span class="string">'New York'</span>, <span class="string">'Mumbai'</span>, <span class="string">'Buenos Aires'</span>].sort();</span><br><span class="line"><span class="comment">// ["Buenos Aires", "Mumbai", "New York", "Shanghai"]</span></span><br></pre></td></tr></table></figure><br>当你试图用非ASCII字符，如 [‘é’, ‘a’, ‘ú’, ‘c’]这样的进行排序，你会得到一个奇怪的结果[‘c’, ‘e’, ‘á’, ‘ú’]，因为只有用英语的语言才能排序，所以发生这种情况。<br>看一个简单的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spanish</span></span><br><span class="line">[<span class="string">'único'</span>,<span class="string">'árbol'</span>, <span class="string">'cosas'</span>, <span class="string">'fútbol'</span>].sort();</span><br><span class="line"><span class="comment">// ["cosas", "fútbol", "árbol", "único"] // 错误的排序</span></span><br><span class="line"><span class="comment">// German</span></span><br><span class="line">[<span class="string">'Woche'</span>, <span class="string">'wöchentlich'</span>, <span class="string">'wäre'</span>, <span class="string">'Wann'</span>].sort();</span><br><span class="line"><span class="comment">// ["Wann", "Woche", "wäre", "wöchentlich"] // 错误的排序</span></span><br></pre></td></tr></table></figure><br>幸运的是，有两种方法来避免这种行为，ECMAScript国际化的API提供了localecompare和and Intl.Collator。<br>这两种方法都有自己的自定义参数，以便将其配置来充分的完成功能。<br>使用 localeCompare()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'único'</span>,<span class="string">'árbol'</span>, <span class="string">'cosas'</span>, <span class="string">'fútbol'</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.localeCompare(b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ["árbol", "cosas", "fútbol", "único"]</span></span><br><span class="line">[<span class="string">'Woche'</span>, <span class="string">'wöchentlich'</span>, <span class="string">'wäre'</span>, <span class="string">'Wann'</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.localeCompare(b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ["Wann", "wäre", "Woche", "wöchentlich"]</span></span><br></pre></td></tr></table></figure><br>使用 intl.collator()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'único'</span>,<span class="string">'árbol'</span>, <span class="string">'cosas'</span>, <span class="string">'fútbol'</span>].sort(<span class="built_in">Intl</span>.Collator().compare);</span><br><span class="line"><span class="comment">// ["árbol", "cosas", "fútbol", "único"]</span></span><br><span class="line">[<span class="string">'Woche'</span>, <span class="string">'wöchentlich'</span>, <span class="string">'wäre'</span>, <span class="string">'Wann'</span>].sort(<span class="built_in">Intl</span>.Collator().compare);</span><br><span class="line"><span class="comment">// ["Wann", "wäre", "Woche", "wöchentlich"]</span></span><br></pre></td></tr></table></figure></p><h2 id="检查一个对象是否有属性"><a href="#检查一个对象是否有属性" class="headerlink" title="检查一个对象是否有属性"></a>检查一个对象是否有属性</h2><ul><li>第一种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    name: <span class="string">'@tips_js'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (myObject.name) &#123; ... &#125;</span><br></pre></td></tr></table></figure></li><li>第二种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    name: <span class="string">'@tips_js'</span></span><br><span class="line">&#125;;</span><br><span class="line">myObject.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> myObject; <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty(<span class="string">'valueOf'</span>); <span class="comment">// false, valueOf 是从原型链继承的</span></span><br><span class="line"><span class="string">'valueOf'</span> <span class="keyword">in</span> myObject; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'@tips_js'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">myFunc.prototype.age = <span class="string">'10 days'</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> myFunc();</span><br><span class="line">user.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></span><br><span class="line">user.hasOwnProperty(<span class="string">'age'</span>); <span class="comment">// false, 因为age是原型链上的</span></span><br></pre></td></tr></table></figure><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doTheThing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 错误: notDeclared is not defined</span></span><br><span class="line">    <span class="built_in">console</span>.log(notDeclared);</span><br><span class="line">    <span class="comment">// 输出: undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(definedLater);</span><br><span class="line">    <span class="keyword">var</span> definedLater;</span><br><span class="line">    definedLater = <span class="string">'I am defined!'</span></span><br><span class="line">    <span class="comment">// 输出: 'I am defined!'</span></span><br><span class="line">    <span class="built_in">console</span>.log(definedLater)</span><br><span class="line">    <span class="comment">// Outputs: undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(definedSimulateneously);</span><br><span class="line">    <span class="keyword">var</span> definedSimulateneously = <span class="string">'I am defined!'</span></span><br><span class="line">    <span class="comment">// 输出: 'I am defined!'</span></span><br><span class="line">    <span class="built_in">console</span>.log(definedSimulateneously)</span><br><span class="line">    <span class="comment">// 输出: 'I did it!'</span></span><br><span class="line">    doSomethingElse();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I did it!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 错误: undefined is not a function</span></span><br><span class="line">    functionVar();</span><br><span class="line">    <span class="keyword">var</span> functionVar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I did it!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="apply将数组转换成参数列表"><a href="#apply将数组转换成参数列表" class="headerlink" title="apply将数组转换成参数列表"></a>apply将数组转换成参数列表</h2><p>apply可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来转换为参数的列表。</p><h3 id="Math-max-得到数组中最大的一项"><a href="#Math-max-得到数组中最大的一项" class="headerlink" title="Math.max 得到数组中最大的一项"></a>Math.max 得到数组中最大的一项</h3><p>因为Math.max 参数里面不支持Math.max([param1,param2]) 也就是数组  </p><p>但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max=Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项  </p><p>(apply会将一个数组转换为一个参数接一个参数的传递给方法)  </p><p> 注意：这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,[<span class="number">19</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">100</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>])</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p><h3 id="Math-min-可以实现得到数组中最小的一项"><a href="#Math-min-可以实现得到数组中最小的一项" class="headerlink" title="Math.min  可以实现得到数组中最小的一项"></a>Math.min  可以实现得到数组中最小的一项</h3><p> 同Math.max思想 : var min=Math.min.apply(null,array);<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,[<span class="number">19</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">100</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>])</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-push-可以实现两个数组合并"><a href="#Array-prototype-push-可以实现两个数组合并" class="headerlink" title="Array.prototype.push 可以实现两个数组合并"></a>Array.prototype.push 可以实现两个数组合并</h3><p> push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>);   </span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>); </span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1,arr2);</span><br></pre></td></tr></table></figure><br>上面的例子中arr1调用了push方法,参数是通过apply将数组转换为参数列表的集合</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈eval</title>
      <link href="/2020/03/05/analyze-eval/"/>
      <url>/2020/03/05/analyze-eval/</url>
      
        <content type="html"><![CDATA[<p>原文来自:<a href="https://www.oschina.net/translate/global-eval-what-are-the-options?lang=chs&amp;p=2" target="_blank" rel="noopener">eval 的一些不为人知道的用法</a></p><h2 id="eval是如何运转的"><a href="#eval是如何运转的" class="headerlink" title="eval是如何运转的"></a>eval是如何运转的</h2><p>在全局作用域下eval代码：<strong>原生的eval函数在调用的作用域中运行代码</strong><br>eval函数的行为由两个因素决定：(1) 直接调用还是间接调用(译者注：使用call或apply函数)；（2）是否在strict模式下运行</p><h3 id="在全局范围Eval"><a href="#在全局范围Eval" class="headerlink" title="在全局范围Eval"></a>在全局范围Eval</h3><p>本地的eval不允许执行全局的代码。</p><h3 id="间接-eval-调用理论"><a href="#间接-eval-调用理论" class="headerlink" title="间接 eval 调用理论"></a>间接 eval 调用理论</h3><p>直接eval调用的定义：</p><blockquote><p>对eval函数的直接调用，就是表示为一个调用表达式，它满足以下两个条件:<br>1.引用是调用表达式中的成员表达式的计算结果，它具有一个环境记录作为它的基础数值，它的引用名是”eval”。<br>2.以该引用为参数调用抽象操作GetValue的结果，是15.1.2.1中定义的标准的原生函数<br>比如eval(‘1+1’)是一个直接调用，但(1,eval)(‘1+1’)不是直接调用而是间接调用<br>eval             ( ‘1+1’ )<br> |<strong>__</strong>|<br> Identifier</p></blockquote><blockquote><p> |<strong>__</strong>|          |<strong>____</strong>|<br> MemberExpression  Arguments</p></blockquote><blockquote><p> |<strong><strong><strong><strong><strong><strong>__</strong></strong></strong></strong></strong></strong>|<br> CallExpression<br>ES3定义<br>任何非直接调用 (<strong>除了显式地使用它的名字作为一个标识符，而这个标识符就是调用表达式中的成员表达式</strong>)<br>对于(1,eval)(‘1+1’)<br>(     1        ,         eval  )        ( ‘1+1’ )<br>     |<strong><strong>|   |_</strong></strong>|    |<strong>_</strong>|<br>       常量     操作符      标识符</p></blockquote><blockquote><pre><code>|_________________________| 表达式</code></pre></blockquote><blockquote><p>  |<strong><strong><strong><strong><strong><strong><strong>__</strong></strong></strong></strong></strong></strong></strong>|<br>    主要表达式</p></blockquote><blockquote><p>  |<strong><strong><strong><strong><strong><strong><strong>__</strong></strong></strong></strong></strong></strong></strong>|        |<strong>____</strong>|<br>   成员表达式                                参数</p></blockquote><blockquote><p>  |<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>|<br>   调用表达式<br>参数（调用括号）之前的部分不只是由“eval”标识符组成。这是一个完整的其他类型的表达式，由逗号操作符，数字常量，然后才是”eval”标识符组成。1,eval - 基于逗号操作符运行的方式-仍然执行一个标准的内置的eval函数，不过整个表达式不再是直接调用了。因此它是 间接eval调用。更多间接调用示例：</p><ul><li>(1, eval)(‘…’)</li><li>(eval, eval)(‘…’)</li><li>(1 ? eval : 0)(‘…’)</li><li>(__ = eval)(‘…’)</li><li>var e = eval; e(‘…’)</li><li>(function(e) { e(‘…’) })(eval)</li><li>(function(e) { return e })(eval)(‘…’)</li><li>(function() { arguments<a href="&#39;...&#39;">0</a> })(eval)</li><li>this.eval(‘…’)</li><li>this<a href="&#39;...&#39;">‘eval’</a></li><li>[eval]<a href="&#39;...&#39;">0</a></li><li>eval.call(this, ‘…’)</li><li>eval(‘eval’)(‘…’)<br>直接调用示例</li><li>eval(‘…’)</li><li>(eval)(‘…’)   调用表达式里的 “eval”应当是引用，而不是值</li><li>(((eval)))(‘…’)   调用表达式里的 “eval”应当是引用，而不是值</li><li>(function() { return eval(‘…’) })()</li><li>eval(‘eval(“…”)’)</li><li>(function(eval) { return eval(‘…’); })(eval)</li><li>with({ eval: eval }) eval(‘…’)</li><li>with(window) eval(‘…’)</li></ul></blockquote><p>对部分作出解析如下：</p><ul><li>eval(); // &lt;– 调用括号左边的表达式 — “eval” — 计算出一个引用</li><li>(eval)(); // &lt;– 调用括号左边的表达式 — “(eval)” — 计算出一个引用</li><li>(((eval)))(); // &lt;– 调用括号左边的表达式 — “(((eval)))” — 计算出一个引用</li><li>(1,eval)(); // &lt;– 调用括号左边的表达式 — “(1, eval)” — 计算出一个值</li><li>(eval = eval)(); // &lt;– 调用括号左边的表达式 — “(eval = eval)” — 计算出一个值</li></ul><p>总结：ES5的完全一致性没有到来，各浏览器对间接eval的识别存在差异，使得间接eval调用（自身）不是跨浏览器”全局eval”解决方案的了好候选者</p><h2 id="window-execScript"><a href="#window-execScript" class="headerlink" title="window.execScript"></a>window.execScript</h2><p>IE浏览器中有一个window.execScript功能。它的定义是”在所提供的语言中执行指定的脚本”，同时在全局范围内允许执行Javascript代码。Chrome浏览器也有这个功能，最大可能是由于兼容性的原因。截至今天，window.execScriptis仍然在Chrome 9中存在。<br>调用window.execScript的方式不同于直接eval调用 ，它 不会 返回一个值。事实上，它在Chrome中的确返回值，但该值总是空</p><h2 id="window-eval"><a href="#window-eval" class="headerlink" title="window.eval"></a>window.eval</h2><p>window.eval(‘…’)只不过是间接eval调用，而且在计算的时候与(1,eval)(‘…’),this.eval(‘…’)或者(eval=eval)(‘…’)没有什么不同。</p><h2 id="webkit里的eval上下文"><a href="#webkit里的eval上下文" class="headerlink" title="webkit里的eval上下文"></a>webkit里的eval上下文</h2><ul><li>window.eval(‘1+1’); //正常运行</li><li>eval.call(window, ‘1+1’); //正常运行</li><li>eval.call(null, ‘1+1’); //正常运行，因为eval是被引用全局对象的”this”所调用。</li><li>eval.call({ }, ‘1+1’); //EvalError(错误的”this”对象）</li><li>[eval]<a href="&#39;1+1&#39;">0</a>; //EvalError(错误的”this”对象）)</li><li>with({ eval: eval }) eval(‘1+1’); //EvalError(错误的”this”对象）</li></ul><h2 id="新函数"><a href="#新函数" class="headerlink" title="新函数"></a>新函数</h2><blockquote><p>Function(‘return 1+1’)(); // 2<br>function globalEval(expression) {<br>  return Function(expression)();<br>}</p></blockquote><blockquote><p>var x = ‘outer’;<br>(function() {<br>  var x = ‘inner’;<br>  globalEval(‘alert(x)’); //警告:”outer”<br>})();</p></blockquote><blockquote><p>//然而!</p></blockquote><blockquote><p>globalEval(‘var foo = 1’);<br>typeof foo; //“未定义”（”foo”是在由”Function”创建的函数内声明的，不是全局范围的。）<br>eval(‘alert(arguments)’); //引用错误<br>Function(‘alert(arguments)’)(); //告警显示“arguments”对象。<br>Function执行代码是一个很好的解决办法，不过它也不是全局性地执行代码的。</p></blockquote><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>setTimeout是全局性地执行代码的另一个方法-在给出的代码是字符串而不是函数的时候最适合,etTimeout的问题在于它是异步的，而且它-类似于window.execScript-不返回计算的结果。整个HTML5规格说明没有提及到setTimeout应当在全局范围内执行代码。</p><h2 id="插入脚本"><a href="#插入脚本" class="headerlink" title="插入脚本"></a>插入脚本</h2><p>在浏览器环境里，还有一个方法是向文档里注入脚本元素。然后解析这个脚本元素的内容，接着在全局范围内就像执行程序那样执行这个脚本：</p><blockquote><p>var el = document.createElement(‘script’);<br>el.appendChild(document.createTextNode(‘1+1’));<br>document.body.appendChild(el);<br>就像window.execScript和setTimeout那样，这种方法也不允许获得一个有意义的返回值（除非使用了某种类型的变通方案）。在目前的jQuery(1.4.4)的jQuery.globalEval里，插入脚本得到了使用。它虽然不能提供返回值，但是与”间接eval+window.execScript”组合方式相比，它更能够在跨浏览器情况下正常运行。例如，它可在Safari 3.2及以前版本的Safari里和更早的Opera里正常运行，而在这样的浏览器里间接的eval调用则无法运行。</p></blockquote><h2 id="window-execScript-eval的问题"><a href="#window-execScript-eval的问题" class="headerlink" title="window.execScript || eval的问题"></a>window.execScript || eval的问题</h2><p>两个主要的缺点概括如下：</p><blockquote><p>间接地eval是不足以跨浏览器的；缺乏功能测试<br>非标准的execScript优先于标准的eval<br>正像你前面所看到的，间接的eval调用在一些正在使用的浏览器里表现的仍然是稀奇古怪的。还有些环境没有进行过测试-移动浏览器，非标准平台，稀少的或者未知的浏览器等。认为间接eval就应全局性地执行代码这个事实是相当草率的- 因为这种情况只是出现在一些较新的、流行的浏览器里。非常完整的策略是在试图使用间接eval之前请真正地测试它的行为。</p></blockquote><p>浏览器不完全遵从ES5这个事实使一切变得更糟。例如，Chrom9认为with(widonw) eval(‘…’)是间接调用，即使按照ES5来判定的话，它都确实是一个直接调用-由于”eval”标识符是在调用表达式的成员表达式里；现在它是引用，然后它被解析为一个标准的、内置的eval函数。</p><p>功能测试法</p><p>创建更强大的全局eval版本是不难的。</p><p>想法非常相似-使用间接调用，把window.execScript做为备用。然而重大的区别是间接调用是要进行功能测试的，而且在可以安全地使用的时候才使用。这儿可能的一个问题是windows.execScript没有经过测试，而且假设它全局性地执行代码。如果你发现这个假设不可靠，那么对window.execScript增加功能测试就显得无关紧要了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalEval = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> isIndirectEvalGlobal = (<span class="function"><span class="keyword">function</span>(<span class="params">original, Object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//我们做为第一个参数传递给的“Object”是不是解析为本地变量，</span></span><br><span class="line">      <span class="comment">// 或者全局的、内置的“Object" ,引用?</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1</span>,<span class="built_in">eval</span>)(<span class="string">'Object'</span>) === original;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      <span class="comment">// 如果间接eval有错误抛出（依据ES3，这是允许的, 那么就返回"false"跳出</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="built_in">Object</span>, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isIndirectEvalGlobal) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果间接eval全局性地执行了代码, 那么使用它</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">expression</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">1</span>,<span class="built_in">eval</span>)(expression);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.execScript !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果”window.execScript“存在,那么使用它</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">expression</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">window</span>.execScript(expression);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//否则, 由于没有返回任何东西，那么globalEval是“未定义的”</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><br>这种实现的好处是它启用了优雅的降级。你可以很容易地发现在当前的环境里glbalEval是否可用（因为当以上两种方案都不可用时，globalEval就是未定义的）:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (globalEval) &#123;</span><br><span class="line">  <span class="comment">/* 在全局范围内执行的代码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 使用后备方法的地方 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意-与任何间接eval/window.execScript方法相比-globalEval的不同在于返回值的能力，返回值由所选择的方法来确定。</p><p>几种库里的全局eval</p><p>一些流行的Javascript库都做了些什么？它们选择是哪一种全局eval方案？</p><p>正如我们先前看到的，jQuery为了满足更广泛的浏览器支持而不返回值，而且是在它的jQuery.globalEval方法里使用了脚本插入技术。</p><p>Prototype.js实际上不想在全局范围内执行脚本-它使用了很旧的、直接eval调用。Prototype.js对文档里的本地执行结果给出了告警。</p><p>Dojo选择的是不出名的window.eval变种，不过实际上是把事情搞得一团糟-如果全局对象有eval方法（在所有ES3兼容的浏览器里都是这样的），那么它就使用间接eval调用，而在无法使用情况下才使用一般的eval调用。很明显，这种后备方法将使得代码在本地执行，而且还应当是隐性执行的。Dojo的eval行为随着环境在恣意地变化，而且还可能无法捕捉错误。在一段与此相关的可笑的评论里，我被<br>其中David Mark有关dojo.eval的评论搞得晕头转向。</p><p>Mootools在window.execScript可用时使用window.execScript，而且以脚本插入做为备用方案（类似于jQuery)。然而jQuery的脚本插入比Mootools强大多了，因为jQuery的确测试它是否执行了代码。</p><p>Fuse.js选择了一个非常详尽和仔细的策略。它测试间接eval调用是否按照所期望的那样（如果存在错误，就捕捉）工作，如果是，使用它；如果间接eval调用不存在，Fuse将使用备用的脚本注入。不像jQuery或者Mootools,实际上它想通过脚本注入使执行的代码返回一个值。它使用eval封装代码内容做到了这些。使用eval全局性地执行代码产生的另一个有趣的结果是函数和变量的声明创建了可被删除的绑定（这最有可能是一个无关紧要的细枝末节）。</p><p>总结</p><p>想想我们可以从这一切中学到什么?</p><p>希望你现在对为什么eval有时在全局范围执行代码有一个真正的理解。window.eval(…)不是很特别,只是另一种形式的间接eval。该间接eval的行为在ES3和ES5中的指定不同。在实际实现中的间接eval的这种行为仍然经常零星发生，部分原因是由于从ES3过渡到ES5产生的,部分是因为未捕获到的错误。您已经看到,盲目地依赖间接eval是不安全的。依靠间接eval实现的“全局eval”应采用功能测试,而且在跨浏览器的脚本中还有很多其他的事情。最后,替代的技术是通过脚本库来使用,比如脚本注入。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows命令</title>
      <link href="/2020/03/04/windows-system-command/"/>
      <url>/2020/03/04/windows-system-command/</url>
      
        <content type="html"><![CDATA[<h2 id="CMD相关基本命令"><a href="#CMD相关基本命令" class="headerlink" title="CMD相关基本命令"></a>CMD相关基本命令</h2><ul><li>cmd——CMD命令提示符</li><li>MSConfig——系统配置实用程序</li><li>regedit——注册表编辑器</li><li>notepad——打开记事本</li><li>calc——启动计算器</li><li>mstsc——远程桌面连接</li><li>services.msc——系统服务</li><li>gpedit.msc——组策略</li><li>shutdown——60秒倒计时关机命令</li><li>Nslookup——-IP地址侦测器</li><li>explorer——打开资源管理器</li><li>chkdsk.exe——Chkdsk磁盘检查</li><li>dcomcnfg——打开系统组件服务</li><li>devmgmt.msc——设备管理器</li><li>cleanmgr——垃圾整理</li><li>compmgmt.msc——计算机管理</li><li>secpol.msc——本地安全策略</li><li>netstat -an——(TC)命令检查接口</li><li>taskmgr——任务管理器</li><li>mmc——打开控制台</li><li>logoff——注销命令</li><li>lusrmgr.msc——本机用户和组</li><li>dvdplay——DVD播放器</li><li>diskmgmt.msc——磁盘管理实用程序</li><li>dxdiag——检查DirectX信息</li><li>perfmon.msc——计算机性能检测程序</li><li>winver——检测Windows版本</li><li>write——写字板</li><li>wiaacmgr——扫描仪和照相机向导</li><li>mspaint——画图板</li><li>magnify——放大镜实用程序</li><li>utilman——辅助工具管理器</li><li>osk——打开屏幕键盘</li><li>odbcad32——ODBC数据源管理器</li><li>Sndvol32或Sndvol——音量控制程序</li><li>sfc.exe——系统文件检查器</li><li>sfc /scannow——Windows文件保护</li><li>eventvwr——事件查看器</li><li>cliconfg——SQL Server客户端网络实用程序</li><li>certmgr.msc——证书管理实用程序</li></ul><hr><h2 id="Win键相关按键"><a href="#Win键相关按键" class="headerlink" title="Win键相关按键"></a>Win键相关按键</h2><ul><li>Win键：打开“开始”菜单</li><li>Win键+E：打开我的电脑</li><li>Win键+R：打开运行对话框</li><li>Win键+D：显示桌面</li><li>Win键+M：最小化所有窗口</li><li>Win键+X：Windows移动中心，调节音量，屏幕亮度</li><li>Win键+Home：除了正在选择的窗口，其他窗口最小化</li><li>Win键+PAUSE BREAK：打开“系统属性”对话框</li><li>Win键+【+/-】：打开Windows放大、缩小功能</li><li>Win键+Pause：显示系统属性对话框</li><li>Win键+TAB：Aero三维效果切换程序</li><li>Win键+数字键：让位于任务栏上的程序打开（数字为序号）</li><li>Win键+P：选择一个演示文稿显示模式，可以用来关闭屏幕</li><li>Win键+L：锁定计算机，需要输入密码或者选择其他用户</li><li>Win键+T：多次按可以在多个程序间顺序切换</li><li>Win键+F：计算机搜索，可以搜索计算机里面所有文件</li><li>Win键+【←/→】：在屏幕左/右半个屏幕最大化</li><li>Win键+【↑/↓】：最大化/最小化</li></ul><hr><h2 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul><li>dir         列文件名</li><li>deltree     删除目录树 </li><li>cls         清屏 </li><li>cd          改变当前目录。</li><li>copy        拷贝文件 </li><li>diskcopy    复制磁盘 </li><li>del         删除文件 </li><li>format      格式化磁盘。</li><li>edit        文本编辑 </li><li>mem         查看内存状况 </li><li>md          建立子目录 </li><li>move        移动文件、改目录名。</li><li>more        分屏显示 </li><li>type        显示文件内容 </li><li>rd          删除目录</li><li>sys         制作DOS系统盘。</li><li>ren         改变文件名 </li><li>xcopy       拷贝目录与文件 </li><li>chkdsk      检查磁盘 </li><li>attrib      设置文件属性。</li><li>fdisk       硬盘分区</li><li>date        显示及修改日期 </li><li>label       设置卷标号</li><li>defrag      磁盘碎片整理。</li><li>msd         系统检测 </li><li>path        设置搜寻目录 </li><li>share       文件共享</li><li>memmaker    内存优化管理。</li><li>help        帮助</li><li>restore     恢复备份文件 </li><li>set         设置环境变量</li><li>time        显示及修改时间。</li><li>tree        列目录树</li><li>debug       随机调试程序 </li><li>doskey      重新调用DOS命令</li><li>prempt      设置提示符</li><li>undelete    恢复被删的文件 </li><li>scandisk    检测、修理磁盘。</li></ul><hr><h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><ul><li>diskcomp    磁盘比较 </li><li>append      设置非执行文件路径</li><li>expand      还原DOS文件 </li><li>fasthelp    快速显示帮助信息</li><li>fc          文件比较</li><li>interink    启动服务器</li><li>setver      设置版本</li><li>intersvr    启动客户机</li><li>subst       路径替换</li><li>qbasic Basic集成环境</li><li>vsafe       防病毒</li><li>unformat    恢复已格式化的磁盘</li><li>ver         显示DOS版本号</li><li>smartdrv    设置磁盘加速器</li><li>vol         显示磁盘卷标号</li><li>lh          将程序装入高端内存</li><li>ctty        改变控制设备</li><li>emm386      扩展内存管理</li></ul><hr><h3 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍"></a>常用命令介绍</h3><p>一、Dir<br>　　显示目录文件和子目录列表<br>　　可以使用通配符（? 和 <em>），？表通配一个字符，</em>表通配任意字符<br>　　<em>.后缀<br>　　指定要查看后缀的文件。 上面其实也可以为“ . 后缀”,例如dir </em>.exe 等于dir .exe<br>　　/p<br>　　每次显示一个列表屏幕。要查看下一屏，请按键盘上的任意键。<br>　　/w<br>　　以宽格式显示列表，在每一行上最多显示 5 个文件名或目录名。<br>　　/s<br>　　列出指定目录及所有子目录中出现的每个指定的文件名。比win环境下的查找快多了<br>　　dir <em>.</em> -&gt; a.txt 把当前目录文件列表写入a.txt<br>　　dir <em>.</em> /s -&gt; a.txt 把当前目录文件列表写入a.txt，包括子目录下文件。<br>二、Attrib<br>　　显示、设置或删除指派给文件或目录的只读、存档、系统以及隐藏属性。如果在不含参数的情况下使用，则 attrib 会显示当前目录中所有文件的属性。<br>　　+r 设置只读属性。<br>　　-r 清除只读属性。<br>　　+a 设置存档文件属性。<br>　　-a 清除存档文件属性。<br>　　+s 设置系统属性。<br>　　-s 清除系统属性。<br>　　+h 设置隐藏属性。<br>　　-h 清除隐藏属性。<br>三、Cls<br>　　清除显示在命令提示符窗口中的所有信息，并返回空窗口，即“清屏”<br>四、Exit<br>　　退出当前命令解释程序并返回到系统。<br>五、format<br>　　格式化<br>　　/q 执行快速格式化。删除以前已格式化卷的文件表和根目录，但不在扇区之间扫描损坏区域。使用 /q 命令行选项应该仅格式化以前已格式化的完好的卷。<br>六、Ipconfig<br>　　显示所有当前的 TCP/IP 网络配置值、刷新动态主机配置协议 (DHCP) 和域名系统 (DNS) 设置。使用不带参数的 ipconfig 可以显示所有适配器的 IP 地址、子网掩码、默认网关。<br>　　/all 显示所有适配器的完整 TCP/IP 配置信息。<br>　　ipconfig 等价于 winipcfg，后者在ME、98 和 95 上可用。尽管 Windows XP 没有提供象 winipcfg 命令一样的图形化界面，但可以使用“网络连接”查看和更新 IP 地址。要做到这一点，请打开 网络连接，右键单击某一网络连接，单击“状态”，然后单击“支持”选项卡。<br>　　该命令最适用于配置为自动获取 IP 地址的计算机。它使用户可以确定哪些 TCP/IP 配置值是由 DHCP、自动专用 IP 地址 (APIPA) 和其他配置配置的。<br>七、md 创建目录或子目录<br>八、Move 将一个或多个文件从一个目录移动到指定的目录。<br>九、Nbtstat<br>　　显示本地计算机和远程计算机的基于 TCP/IP (NetBT) 协议的 NetBIOS 统计资料、NetBIOS 名称表和 NetBIOS 名称缓存。Nbtstat 可以刷新 NetBIOS 名称缓存和注册的 Windows Internet 名称服务 (WINS) 名称。使用不带参数的 nbtstat 显示帮助。Nbtstat 命令行参数区分大小写。<br>　　-a remotename<br>　　显示远程计算机的 NetBIOS 名称表，其中，RemoteName 是远程计算机的 NetBIOS 计算机名称。<br>　　-A IPAddress 显示远程计算机的 NetBIOS 名称表，其名称由远程计算机的 IP 地址指定（以小数点分隔）。<br>十、Netstat 显示活动的 TCP 连接、计算机侦听的端口、以太网统计信息、IP 路由表、IPv4 统计信息（对于 IP、ICMP、TCP 和 UDP 协议）以及 IPv6 统计信息（对于 IPv6、ICMPv6、通过 IPv6 的 TCP 以及通过 IPv6 的 UDP 协议）。使用时如果不带参数，netstat 显示活动的 TCP 连接。<br>　　-a 显示所有活动的 TCP 连接以及计算机侦听的 TCP 和 UDP 端口。<br>十一、Ping 通过发送“网际消息控制协议 (ICMP)”回响请求消息来验证与另一台 TCP/IP 计算机的 IP 级连接。回响应答消息的接收情况将和往返过程的次数一起显示出来。Ping 是用于检测网络连接性、可到达性和名称解析的疑难问题的主要 TCP/IP 命令。如果不带参数，ping 将显示帮助。名称和Ip地址解析是它的最简单应用也是用的最多的。<br>　　-t 指定在中断前 ping 可以持续发送回响请求信息到目的地。要中断并显示统计信息，请按 CTRL-BREAK。要中断并退出 ping，请按 CTRL-C。<br>　　-lSize<br>　　指定发送的回响请求消息中“数据”字段的长度（以字节表示）。默认值为 32。size 的最大值是 65,527。<br>十二、Rename (Ren)<br>　　更改文件的名称。 例如 ren <em>.abc </em>.cba<br>十三、Set 显示、设置或删除环境变量。如果没有任何参数，set 命令将显示当前环境设置。<br>十四、Shutdown 允许您关闭或重新启动本地或远程计算机。如果没有使用参数，shutdown 将注销当前用户。<br>　　-m ComputerName 指定要关闭的计算机。<br>　　-t xx 将用于系统关闭的定时器设置为 xx 秒。默认值是 20 秒。<br>　　-l 注销当前用户，这是默认设置。-m ComputerName 优先。<br>　　-s 关闭本地计算机。<br>　　-r 关闭之后重新启动。<br>　　-a 中止关闭。除了 -l 和 ComputerName 外，系统将忽略其它参数。在超时期间，您只可以使用 -a。<br>十五、System File Checker (sfc)<br>　　win下才有，在重新启动计算机后扫描和验证所有受保护的系统文件。<br>　　/scannow 立即扫描所有受保护的系统文件。<br>　　/scanonce 一次扫描所有受保护的系统文件。<br>　　/purgecache 立即清除“Windows 文件保护”文件高速缓存，并扫描所有受保护的系统文件。<br>　　/cachesize=x 设置“Windows 文件保护”文件高速缓存的大小，以 MB 为单位。<br>十六、type 显示文本文件的内容。使用 type 命令查看文本文件或者是bat文件而不修改文件<br>十七、Tree 图像化显示路径或驱动器中磁盘的目录结构。<br>十八、Xcopy 复制文件和目录，包括子目录。<br>　　/s 复制非空的目录和子目录。如果省略 /s，xcopy 将在一个目录中工作。<br>　　/e 复制所有子目录，包括空目录。<br>十九、copy 将一个或多个文件从一个位置复制到其他位置<br>二十、del 删除指定文件。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2020/03/02/front-end-performance/"/>
      <url>/2020/03/02/front-end-performance/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-的优化"><a href="#HTML-的优化" class="headerlink" title="HTML 的优化"></a>HTML 的优化</h2><h3 id="使用相对-URL"><a href="#使用相对-URL" class="headerlink" title="使用相对 URL"></a>使用相对 URL</h3><p>某些 href、src 属性如果与当前页面处于同一域名下，则使用相对 URL 能够节省至少一个域名的长度。</p><h3 id="删除-HTTP-或者-HTTPS"><a href="#删除-HTTP-或者-HTTPS" class="headerlink" title="删除 HTTP 或者 HTTPS"></a>删除 HTTP 或者 HTTPS</h3><p>绝对 URL 都以 HTTP 或 HTTPS 等协议头开始，如果能确定 URL 的协议与当前页面 URL 的协议是一致的，或者说该 URL 在多种协议下均是可用的，则可以考虑删除这个协议头。</p><h3 id="删除注释"><a href="#删除注释" class="headerlink" title="删除注释"></a>删除注释</h3><p>考虑不必要的 IE 条件注释和 CDATA 注释及自定义注释。</p><h3 id="压缩空白符"><a href="#压缩空白符" class="headerlink" title="压缩空白符"></a>压缩空白符</h3><p>对于多数标签，可以通过删除多余的空白符来减少 HTML 体积，但是对于 pre 等是例外。</p><h3 id="压缩-inline-css-amp-Javascript"><a href="#压缩-inline-css-amp-Javascript" class="headerlink" title="压缩 inline css &amp; Javascript"></a>压缩 inline css &amp; Javascript</h3><p>不管 inline 还是 external，都需要压缩，这是减小体积的最直接的方式。</p><h3 id="CSS-amp-Javascript-尽量外链"><a href="#CSS-amp-Javascript-尽量外链" class="headerlink" title="CSS &amp; Javascript 尽量外链"></a>CSS &amp; Javascript 尽量外链</h3><p>不仅可以减少体积，还能够充分利用浏览器的缓存机制。</p><h3 id="删除元素默认属性"><a href="#删除元素默认属性" class="headerlink" title="删除元素默认属性"></a>删除元素默认属性</h3><p>在 HTML 规范中，很多 HTML 元素的属性是有默认值的，对于这些默认值可以抹去不写。</p><h3 id="避免使用-Iframe"><a href="#避免使用-Iframe" class="headerlink" title="避免使用 Iframe"></a>避免使用 Iframe</h3><p>创建 iframe 元素的开销要比创建其他类型的 DOM 元素高 1~2 个数量级</p><h3 id="避免空链接属性"><a href="#避免空链接属性" class="headerlink" title="避免空链接属性"></a>避免空链接属性</h3><p>可以看做是上面“删除元素默认属性”的特例，即使图片的地址为空，浏览器依旧会以默认的规则去请求空地址</p><h3 id="避免节点深层级嵌套"><a href="#避免节点深层级嵌套" class="headerlink" title="避免节点深层级嵌套"></a>避免节点深层级嵌套</h3><p>由于浏览器构建 DOM 文档的机制，深层级嵌套的节点在初始化构建时往往需要更多的内存占用，并且在遍历节点时也会更慢些</p><h3 id="避免-Table-布局"><a href="#避免-Table-布局" class="headerlink" title="避免 Table 布局"></a>避免 Table 布局</h3><p>构建 table 的开销也很大</p><h3 id="显示指定文档字符集"><a href="#显示指定文档字符集" class="headerlink" title="显示指定文档字符集"></a>显示指定文档字符集</h3><p>如果浏览器不能获知页面的编码字符集，一般都会在执行脚本和渲染页面前，把字节流缓存，然后再搜索可进行解析的字符集，或以默认的字符集来解析页面代码，这会导致消耗不必要的时间。为了避免浏览器把时间花费在搜寻合适的字符集来进行解码，所以最好在文档中总是显式的指定页面字符集。</p><h2 id="CSS-的优化"><a href="#CSS-的优化" class="headerlink" title="CSS 的优化"></a>CSS 的优化</h2><h3 id="把-CSS-放到代码页上端"><a href="#把-CSS-放到代码页上端" class="headerlink" title="把 CSS 放到代码页上端"></a>把 CSS 放到代码页上端</h3><p>加快渲染</p><h3 id="避免-CSS-表达式"><a href="#避免-CSS-表达式" class="headerlink" title="避免 CSS 表达式"></a>避免 CSS 表达式</h3><p>表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次。给 CSS 表达式增加一个计数器可以跟踪表达式的计算频率。在页面中随便移动鼠标都可以轻松达到 10000 次以上的计算量。</p><h3 id="使用-而不是-import"><a href="#使用-而不是-import" class="headerlink" title="使用  而不是 @import"></a>使用 <link> 而不是 @import</h3><p>在外部的 CSS 文档中使用 @import 会使得页面在加载时增加额外的延迟。虽然规则允许在样式中调用 @import 来导入其它的 CSS，但浏览器不能并行下载样式，就会导致页面增添了额外的往返耗时。比如，第一个 CSS 文档 first.css 包含了以下内容：@import url(“second.css”)。那么浏览器就必须先把 first.css 下载、解析和执行后，才发现及处理第二个文档 second.css。</p><h3 id="避免通配选择器"><a href="#避免通配选择器" class="headerlink" title="避免通配选择器"></a>避免通配选择器</h3><p>CSS 选择器对性能的影响源于浏览器匹配选择器和文档元素时所消耗的时间，所以优化选择器的原则是应尽量避免需要消耗更多匹配时间的选择器。比如这种反例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selected</span> * &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>由于 CSS 选择器从右到左匹配的机制，浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点，因此其匹配开销是非常大的，通常比开销最小的 ID 选择器高出 1~3 个数量级，所以应避免使用关键选择器是通配选择器的规则。</p><h3 id="避免单规则的属性选择器"><a href="#避免单规则的属性选择器" class="headerlink" title="避免单规则的属性选择器"></a>避免单规则的属性选择器</h3><p>属性选择器根据元素的属性是否存在或其属性值进行匹配，如下例规则会把 herf 属性值等于 ”#index” 的链接元素设置为红色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selected</span> <span class="selector-attr">[href=”#index”]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>但其匹配开销是非常大的，浏览器先匹配所有的元素，检查其是否有 href 属性并且 herf 属性值等于 ”#index”， 然后分别向上逐级匹配 class 为 selected 的元素，直到文档的根节点。所以应避免使用关键选择器是单规则属性选择器的规则。</p><h3 id="避免类正则的属性选择器"><a href="#避免类正则的属性选择器" class="headerlink" title="避免类正则的属性选择器"></a>避免类正则的属性选择器</h3><p>CSS3 添加了复杂的属性选择器，可以通过类正则表达式的方式对元素的属性值进行匹配。当然这些类型的选择器定是会影响性能的，正则表达式匹配会比基于类别的匹配会慢很多。大部分情况下我们应尽量避免使用 *=， |=， ^=， $=，和 ~= 语法的属性选择器。</p><h2 id="JavaScript-的优化"><a href="#JavaScript-的优化" class="headerlink" title="JavaScript 的优化"></a>JavaScript 的优化</h2><h3 id="脚本放到-HTML-代码页底部"><a href="#脚本放到-HTML-代码页底部" class="headerlink" title="脚本放到 HTML 代码页底部"></a>脚本放到 HTML 代码页底部</h3><p>加快渲染，当然如果你的 js 会影响 dom 建立，那放在哪都是一样的了</p><h3 id="移除重复脚本"><a href="#移除重复脚本" class="headerlink" title="移除重复脚本"></a>移除重复脚本</h3><p>封装方法是一个前端开发人员最基本的技能</p><h3 id="减少-DOM-访问"><a href="#减少-DOM-访问" class="headerlink" title="减少 DOM 访问"></a>减少 DOM 访问</h3><p>使用 JavaScript 访问 DOM 元素是比较慢的，因此为了提升性能，应该做到：</p><pre><code>缓存已经查询过的元素；线下更新完节点之后再将它们添加到文档树中；避免使用 JavaScript 来修改页面布局；</code></pre><h3 id="使用事件代理"><a href="#使用事件代理" class="headerlink" title="使用事件代理"></a>使用事件代理</h3><p>有时候我们会感觉到页面反应迟钝，这是因为 DOM 树元素中附加了过多的事件句柄并且些事件句病被频繁地触发。这就是为什么说使用事件代理是一种好方法了。如果你在一个 div 中有 10 个按钮，你只需要在 div 上附加一次事件句柄就可以了，而不用去为每一个按钮增加一个句柄。事件冒泡时你可以捕捉到事件并判断出是哪个事件发出的。</p><h3 id="缓存选择器查询结果"><a href="#缓存选择器查询结果" class="headerlink" title="缓存选择器查询结果"></a>缓存选择器查询结果</h3><p>选择器查询是开销很大的方法。所以，使用选择器的次数应该越少越好，并且尽可能缓存选中的结果，便于以后反复使用。 不要使用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jQuery('#top').find('p.classA');</span><br><span class="line">jQuery('#top').find('p.classB');</span><br></pre></td></tr></table></figure><p>而是使用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var cached = jQuery('#top');</span><br><span class="line">cached.find('p.classA');</span><br><span class="line">cached.find('p.classB');</span><br></pre></td></tr></table></figure><h3 id="使用微类库"><a href="#使用微类库" class="headerlink" title="使用微类库"></a>使用微类库</h3><p>通常开发者都会使用 JavaScript 类库，如 jQuery、Mootools、YUI、Dojo 等，但是开发者往往只是使用 JavaScript 类库中的部分功能。为了更大的提升性能，应尽量避免使用这类大而全的类库，而是按需使用微类库来辅助开发。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac下查看和生成ssh密钥</title>
      <link href="/2020/03/02/mac-ssh/"/>
      <url>/2020/03/02/mac-ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="查看本地是否存在ssh密钥"><a href="#查看本地是否存在ssh密钥" class="headerlink" title="查看本地是否存在ssh密钥"></a>查看本地是否存在ssh密钥</h2><blockquote><p>命令：ls -al ~/.ssh<br>如果在输出的文件列表中发现id_rsa和id_rsa.pub的存在，证明本地已经存在SSH密钥，请执行第3步</p></blockquote><h2 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h2><blockquote><p>命令：ssh-keygen -t rsa -C “自己的Email地址”<br>注意：执行完成后会有一些列提示输入密码的指令，直接回车即可</p></blockquote><h2 id="查看ssh公钥"><a href="#查看ssh公钥" class="headerlink" title="查看ssh公钥"></a>查看ssh公钥</h2><blockquote><p>命令：cat /Users/电脑用户名/.ssh/id_rsa.pub</p></blockquote><blockquote><p>复制打印出来的信息，在GitLab或者GitHub的SSH Keys中进行相应设置即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端常用命令</title>
      <link href="/2020/03/02/mac-command/"/>
      <url>/2020/03/02/mac-command/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /zhaopan.pages</span><br></pre></td></tr></table></figure><h3 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><h3 id="输出当前路径名"><a href="#输出当前路径名" class="headerlink" title="输出当前路径名"></a>输出当前路径名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><h3 id="输出当前路径下的所有文件"><a href="#输出当前路径下的所有文件" class="headerlink" title="输出当前路径下的所有文件"></a>输出当前路径下的所有文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><h3 id="输出当前文件下的所有文件-详细信息"><a href="#输出当前文件下的所有文件-详细信息" class="headerlink" title="输出当前文件下的所有文件 详细信息"></a>输出当前文件下的所有文件 详细信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ./</span><br></pre></td></tr></table></figure><h3 id="打开当前文件或文件夹"><a href="#打开当前文件或文件夹" class="headerlink" title="打开当前文件或文件夹"></a>打开当前文件或文件夹</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who</span><br></pre></td></tr></table></figure><h3 id="显示当前用户名"><a href="#显示当前用户名" class="headerlink" title="显示当前用户名"></a>显示当前用户名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><h3 id="清空屏幕的内容"><a href="#清空屏幕的内容" class="headerlink" title="清空屏幕的内容"></a>清空屏幕的内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="number">456</span>/</span><br></pre></td></tr></table></figure><h3 id="删除当前目录下456名字的文件夹，删除文件的同时，里面的文件统统删除"><a href="#删除当前目录下456名字的文件夹，删除文件的同时，里面的文件统统删除" class="headerlink" title="删除当前目录下456名字的文件夹，删除文件的同时，里面的文件统统删除"></a>删除当前目录下456名字的文件夹，删除文件的同时，里面的文件统统删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv <span class="number">1.</span>txt <span class="number">2.</span>txt</span><br></pre></td></tr></table></figure><h3 id="移动-改名，将当前目录的1-txt移动到当前目录，并改名为123-txt"><a href="#移动-改名，将当前目录的1-txt移动到当前目录，并改名为123-txt" class="headerlink" title="移动+改名，将当前目录的1.txt移动到当前目录，并改名为123.txt"></a>移动+改名，将当前目录的1.txt移动到当前目录，并改名为123.txt</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="number">1.</span>txt <span class="number">2.</span>txt</span><br></pre></td></tr></table></figure><h3 id="将当前目录下的1-txt拷贝一份-并放到当前目录下，并命名为2-txt"><a href="#将当前目录下的1-txt拷贝一份-并放到当前目录下，并命名为2-txt" class="headerlink" title="将当前目录下的1.txt拷贝一份,并放到当前目录下，并命名为2.txt"></a>将当前目录下的1.txt拷贝一份,并放到当前目录下，并命名为2.txt</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="number">1.</span>c</span><br></pre></td></tr></table></figure><h3 id="如果文件存在，则打开这个文件，如果不存在，先创建，再打开"><a href="#如果文件存在，则打开这个文件，如果不存在，先创建，再打开" class="headerlink" title="如果文件存在，则打开这个文件，如果不存在，先创建，再打开"></a>如果文件存在，则打开这个文件，如果不存在，先创建，再打开</h3><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>:q 退出，如果文件已经被编辑了，而没有保存的话，是无法退出的<br>:w 保存<br>:wq 保存退出<br>:q! 不保存退出<br>:set nu 显示行号<br>:set nonu 隐藏行号<br><strong>由编辑模式进入一般模式，按Esc键</strong></p><p>一般模式（一般命令）<br>由一般模式进入编辑模式<br>a,i,o shift+a，shift+i,shift+o键</p><p>dd 删除一行（光标所在的哪一行）（剪切）<br>5dd 删除光标下的5行</p><p>p 粘贴<br>yy 复制<br>5yy 复制5行</p><p>u 撤销上一次操作（undo）<br>ctrl+r 恢复操作 （redo）</p><p>gg 将光标定位在第一行<br>shift+g 将光标定位到最后一行<br>num shift+g 将光标定位在第num行</p><p>ls 查看当前目录下的内容<br>ls / 查看根目录下的内容<br>ls ./ 产看当前目录下的内容<br>ls ~ 查看用户目录的内容（打开终端默认在用户目录下）</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决Chrome浏览器强制http重定向到https的问题</title>
      <link href="/2020/03/02/modify-chrome-browser-redirection/"/>
      <url>/2020/03/02/modify-chrome-browser-redirection/</url>
      
        <content type="html"><![CDATA[<p>在chrome地址栏中输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome:<span class="comment">//net-internals/</span></span><br></pre></td></tr></table></figure><br>选择<strong>Domain Security Policy</strong>，在 <strong>Delete domain security policies</strong>标签里输入要删除的域名，如下图：<br><img src="http://eva1314kawayi.com/img/domain_security_policy.png" alt="Domain Security Policy 界面截图" title="Domain Security Policy"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图表mermaid sequence flow</title>
      <link href="/2020/02/29/hexo-mermaid/"/>
      <url>/2020/02/29/hexo-mermaid/</url>
      
        <content type="html"><![CDATA[<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><h2 id="配置-主题下-config-yml"><a href="#配置-主题下-config-yml" class="headerlink" title="配置(主题下_config.yml)"></a>配置(主题下_config.yml)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Mermaid 支持</span><br><span class="line">mermaid:</span><br><span class="line">on: <span class="literal">true</span></span><br><span class="line">cdn: <span class="comment">//cdn.jsdelivr.net/npm/mermaid@8.4.2/dist/mermaid.min.js</span></span><br><span class="line">#cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.3.1/mermaid.min.js</span><br><span class="line">options: # 更多配置信息可以参考 https://mermaidjs.github.io/#/mermaidAPI</span><br><span class="line"> theme: <span class="string">'default'</span></span><br><span class="line"> startOnLoad: <span class="literal">true</span></span><br><span class="line"> flowchart:</span><br><span class="line">   useMaxWidth: <span class="literal">false</span></span><br><span class="line">   htmlLabels: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><p>得到：</p><pre class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>得到：<pre class="mermaid">graph TB    c1-->a2    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end</pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML特殊字符编码对照表</title>
      <link href="/2020/02/28/asii-table/"/>
      <url>/2020/02/28/asii-table/</url>
      
        <content type="html"><![CDATA[<table width="100%" align="center" cellspacing="1" bordercolordark="#FFFFFF" cellpadding="2" border="1" style="color:#666666;font-size:12px"><br><style style="display:none;">.article-entry{margin-top:1rem;}.article-entry br{display:none;}</style><br>    <tr height="26"><td bgcolor="#F6F6F6" align="center">特殊符号</td><br>        <td bgcolor="#F6F6F6">命名实体</td><br>        <td bgcolor="#F6F6F6">十进制编码</td><br>        <td bgcolor="#F6F6F6" align="center">特殊符号</td><br>        <td bgcolor="#F6F6F6">命名实体</td><br>        <td bgcolor="#F6F6F6">十进制编码</td><br>        <td bgcolor="#F6F6F6" align="center">特殊符号</td><br>        <td bgcolor="#F6F6F6">命名实体</td><br>        <td bgcolor="#F6F6F6">十进制编码</td><br>    </tr><br>    <tr><br>        <td bgcolor="#F6F6F6" align="center">&Alpha;</td><br>        <td>&amp;Alpha;</td><br>        <td>&amp;#913;</td><br>        <td bgcolor="#F6F6F6" align="center">&Beta;</td><br>        <td>&amp;Beta;</td><br>        <td>&amp;#914;</td><br>        <td bgcolor="#F6F6F6" align="center">&Gamma;</td><br>        <td>&amp;Gamma;</td><br>        <td>&amp;#915;</td><br>    </tr><br>    <tr><br>        <td bgcolor="#F6F6F6" align="center">&Delta;</td><br>        <td>&amp;Delta;</td><br>        <td>&amp;#916;</td><br>        <td bgcolor="#F6F6F6" align="center">&Epsilon;</td><br>        <td>&amp;Epsilon;</td><br>        <td>&amp;#917;</td><br>        <td bgcolor="#F6F6F6" align="center">&Zeta;</td><br>        <td>&amp;Zeta;</td><br>        <td>&amp;#918;</td><br>    </tr><br><tr><td bgcolor="#F6F6F6" align="center">&Eta;</td><td>&amp;Eta;</td><br><td>&amp;#919;</td><br><td bgcolor="#F6F6F6" align="center">&Theta;</td><br><td>&amp;Theta;</td><br><td>&amp;#920;</td><br><td bgcolor="#F6F6F6" align="center">&Iota;</td><br><td>&amp;Iota;</td><br><td>&amp;#921;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&Kappa;</td><br><td>&amp;Kappa;</td><br><td>&amp;#922;</td><br><td bgcolor="#F6F6F6" align="center">&Lambda;</td><br><td>&amp;Lambda;</td><br><td>&amp;#923;</td><br><td bgcolor="#F6F6F6" align="center">&Mu;</td><br><td>&amp;Mu;</td><br><td>&amp;#924;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&Nu;</td><br><td>&amp;Nu;</td><br><td>&amp;#925;</td><br><td bgcolor="#F6F6F6" align="center">&Xi;</td><br><td>&amp;Xi;</td><br><td>&amp;#926;</td><br><td bgcolor="#F6F6F6" align="center">&Omicron;</td><br><td>&amp;Omicron;</td><br><td>&amp;#927;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&Pi;</td><br><td>&amp;Pi;</td><br><td>&amp;#928;</td><br><td bgcolor="#F6F6F6" align="center">&Rho;</td><br><td>&amp;Rho;</td><br><td>&amp;#929;</td><br><td bgcolor="#F6F6F6" align="center">&Sigma;</td><br><td>&amp;Sigma;</td><br><td>&amp;#931;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&Tau;</td><br><td>&amp;Tau;</td><br><td>&amp;#932;</td><br><td bgcolor="#F6F6F6" align="center">&Upsilon;</td><br><td>&amp;Upsilon;</td><br><td>&amp;#933;</td><br><td bgcolor="#F6F6F6" align="center">&Phi;</td><br><td>&amp;Phi;</td><br><td>&amp;#934;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&Chi;</td><br><td>&amp;Chi;</td><br><td>&amp;#935;</td><br><td bgcolor="#F6F6F6" align="center">&Psi;</td><br><td>&amp;Psi;</td><br><td>&amp;#936;</td><br><td bgcolor="#F6F6F6" align="center">&Omega;</td><br><td>&amp;Omega;</td><br><td>&amp;#937;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&alpha;</td><br><td>&amp;alpha;</td><br><td>&amp;#945;</td><br><td bgcolor="#F6F6F6" align="center">&beta;</td><br><td>&amp;beta;</td><br><td>&amp;#946;</td><br><td bgcolor="#F6F6F6" align="center">&gamma;</td><br><td>&amp;gamma;</td><br><td>&amp;#947;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&delta;</td><br><td>&amp;delta;</td><br><td>&amp;#948;</td><br><td bgcolor="#F6F6F6" align="center">&epsilon;</td><br><td>&amp;epsilon;</td><br><td>&amp;#949;</td><br><td bgcolor="#F6F6F6" align="center">&zeta;</td><br><td>&amp;zeta;</td><br><td>&amp;#950;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&eta;</td><br><td>&amp;eta;</td><br><td>&amp;#951;</td><br><td bgcolor="#F6F6F6" align="center">&theta;</td><br><td>&amp;theta;</td><br><td>&amp;#952;</td><br><td bgcolor="#F6F6F6" align="center">&iota;</td><br><td>&amp;iota;</td><br><td>&amp;#953;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&kappa;</td><br><td>&amp;kappa;</td><br><td>&amp;#954;</td><br><td bgcolor="#F6F6F6" align="center">&lambda;</td><br><td>&amp;lambda;</td><br><td>&amp;#955;</td><br><td bgcolor="#F6F6F6" align="center">&mu;</td><br><td>&amp;mu;</td><br><td>&amp;#956;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&nu;</td><br><td>&amp;nu;</td><br><td>&amp;#957;</td><br><td bgcolor="#F6F6F6" align="center">&xi;</td><br><td>&amp;xi;</td><br><td>&amp;#958;</td><br><td bgcolor="#F6F6F6" align="center">&omicron;</td><br><td>&amp;omicron;</td><br><td>&amp;#959;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&pi;</td><br><td>&amp;pi;</td><br><td>&amp;#960;</td><br><td bgcolor="#F6F6F6" align="center">&rho;</td><br><td>&amp;rho;</td><br><td>&amp;#961;</td><br><td bgcolor="#F6F6F6" align="center">&sigmaf;</td><br><td>&amp;sigmaf;</td><br><td>&amp;#962;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&sigma;</td><br><td>&amp;sigma;</td><br><td>&amp;#963;</td><br><td bgcolor="#F6F6F6" align="center">&tau;</td><br><td>&amp;tau;</td><br><td>&amp;#964;</td><br><td bgcolor="#F6F6F6" align="center">&upsilon;</td><br><td>&amp;upsilon;</td><br><td>&amp;#965;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&phi;</td><br><td>&amp;phi;</td><br><td>&amp;#966;</td><br><td bgcolor="#F6F6F6" align="center">&chi;</td><br><td>&amp;chi;</td><br><td>&amp;#967;</td><br><td bgcolor="#F6F6F6" align="center">&psi;</td><br><td>&amp;psi;</td><br><td>&amp;#968;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&omega;</td><br><td>&amp;omega;</td><br><td>&amp;#969;</td><br><td bgcolor="#F6F6F6" align="center">&thetasym;</td><br><td>&amp;thetasym;</td><br><td>&amp;#977;</td><br><td bgcolor="#F6F6F6" align="center">&upsih;</td><br><td>&amp;upsih;</td><br><td>&amp;#978;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&piv;</td><br><td>&amp;piv;</td><br><td>&amp;#982;</td><br><td bgcolor="#F6F6F6" align="center">&bull;</td><br><td>&amp;bull;</td><br><td>&amp;#8226;</td><br><td bgcolor="#F6F6F6" align="center">&hellip;</td><br><td>&amp;hellip;</td><br><td>&amp;#8230;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&prime;</td><br><td>&amp;prime;</td><br><td>&amp;#8242;</td><br><td bgcolor="#F6F6F6" align="center">&Prime;</td><br><td>&amp;Prime;</td><br><td>&amp;#8243;</td><br><td bgcolor="#F6F6F6" align="center">&oline;</td><br><td>&amp;oline;</td><br><td>&amp;#8254;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&frasl;</td><br><td>&amp;frasl;</td><br><td>&amp;#8260;</td><br><td bgcolor="#F6F6F6" align="center">&weierp;</td><br><td>&amp;weierp;</td><br><td>&amp;#8472;</td><br><td bgcolor="#F6F6F6" align="center">&image;</td><br><td>&amp;image;</td><br><td>&amp;#8465;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&real;</td><br><td>&amp;real;</td><br><td>&amp;#8476;</td><br><td bgcolor="#F6F6F6" align="center">&trade;</td><br><td>&amp;trade;</td><br><td>&amp;#8482;</td><br><td bgcolor="#F6F6F6" align="center">&alefsym;</td><br><td>&amp;alefsym;</td><br><td>&amp;#8501;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&larr;</td><br><td>&amp;larr;</td><br><td>&amp;#8592;</td><br><td bgcolor="#F6F6F6" align="center">&uarr;</td><br><td>&amp;uarr;</td><br><td>&amp;#8593;</td><br><td bgcolor="#F6F6F6" align="center">&rarr;</td><br><td>&amp;rarr;</td><br><td>&amp;#8594;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&darr;</td><br><td>&amp;darr;</td><br><td>&amp;#8595;</td><br><td bgcolor="#F6F6F6" align="center">&harr;</td><br><td>&amp;harr;</td><br><td>&amp;#8596;</td><br><td bgcolor="#F6F6F6" align="center">&crarr;</td><br><td>&amp;crarr;</td><br><td>&amp;#8629;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&lArr;</td><br><td>&amp;lArr;</td><br><td>&amp;#8656;</td><br><td bgcolor="#F6F6F6" align="center">&uArr;</td><br><td>&amp;uArr;</td><br><td>&amp;#8657;</td><br><td bgcolor="#F6F6F6" align="center">&rArr;</td><br><td>&amp;rArr;</td><br><td>&amp;#8658;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&dArr;</td><br><td>&amp;dArr;</td><br><td>&amp;#8659;</td><br><td bgcolor="#F6F6F6" align="center">&hArr;</td><br><td>&amp;hArr;</td><br><td>&amp;#8660;</td><br><td bgcolor="#F6F6F6" align="center">&forall;</td><br><td>&amp;forall;</td><br><td>&amp;#8704;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&part;</td><br><td>&amp;part;</td><br><td>&amp;#8706;</td><br><td bgcolor="#F6F6F6" align="center">&exist;</td><br><td>&amp;exist;</td><br><td>&amp;#8707;</td><br><td bgcolor="#F6F6F6" align="center">&empty;</td><br><td>&amp;empty;</td><br><td>&amp;#8709;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&nabla;</td><br><td>&amp;nabla;</td><br><td>&amp;#8711;</td><br><td bgcolor="#F6F6F6" align="center">&isin;</td><br><td>&amp;isin;</td><br><td>&amp;#8712;</td><br><td bgcolor="#F6F6F6" align="center">&notin;</td><br><td>&amp;notin;</td><br><td>&amp;#8713;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&ni;</td><br><td>&amp;ni;</td><br><td>&amp;#8715;</td><br><td bgcolor="#F6F6F6" align="center">&prod;</td><br><td>&amp;prod;</td><br><td>&amp;#8719;</td><br><td bgcolor="#F6F6F6" align="center">&sum;</td><br><td>&amp;sum;</td><br><td>&amp;#8722;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&minus;</td><br><td>&amp;minus;</td><br><td>&amp;#8722;</td><br><td bgcolor="#F6F6F6" align="center">&lowast;</td><br><td>&amp;lowast;</td><br><td>&amp;#8727;</td><br><td bgcolor="#F6F6F6" align="center">&radic;</td><br><td>&amp;radic;</td><br><td>&amp;#8730;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&prop;</td><br><td>&amp;prop;</td><br><td>&amp;#8733;</td><br><td bgcolor="#F6F6F6" align="center">&infin;</td><br><td>&amp;infin;</td><br><td>&amp;#8734;</td><br><td bgcolor="#F6F6F6" align="center">&ang;</td><br><td>&amp;ang;</td><br><td>&amp;#8736;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&and;</td><br><td>&amp;and;</td><br><td>&amp;#8869;</td><br><td bgcolor="#F6F6F6" align="center">&or;</td><br><td>&amp;or;</td><br><td>&amp;#8870;</td><br><td bgcolor="#F6F6F6" align="center">&cap;</td><br><td>&amp;cap;</td><br><td>&amp;#8745;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&cup;</td><br><td>&amp;cup;</td><br><td>&amp;#8746;</td><br><td bgcolor="#F6F6F6" align="center">&int;</td><br><td>&amp;int;</td><br><td>&amp;#8747;</td><br><td bgcolor="#F6F6F6" align="center">&there4;</td><br><td>&amp;there4;</td><br><td>&amp;#8756;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&sim;</td><br><td>&amp;sim;</td><br><td>&amp;#8764;</td><br><td bgcolor="#F6F6F6" align="center">&cong;</td><br><td>&amp;cong;</td><br><td>&amp;#8773;</td><br><td bgcolor="#F6F6F6" align="center">&asymp;</td><br><td>&amp;asymp;</td><br><td>&amp;#8773;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&ne;</td><br><td>&amp;ne;</td><br><td>&amp;#8800;</td><br><td bgcolor="#F6F6F6" align="center">&equiv;</td><br><td>&amp;equiv;</td><br><td>&amp;#8801;</td><br><td bgcolor="#F6F6F6" align="center">&le;</td><br><td>&amp;le;</td><br><td>&amp;#8804;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&ge;</td><br><td>&amp;ge;</td><br><td>&amp;#8805;</td><br><td bgcolor="#F6F6F6" align="center">&sub;</td><br><td>&amp;sub;</td><br><td>&amp;#8834;</td><br><td bgcolor="#F6F6F6" align="center">&sup;</td><br><td>&amp;sup;</td><br><td>&amp;#8835;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&nsub;</td><br><td>&amp;nsub;</td><br><td>&amp;#8836;</td><br><td bgcolor="#F6F6F6" align="center">&sube;</td><br><td>&amp;sube;</td><br><td>&amp;#8838;</td><br><td bgcolor="#F6F6F6" align="center">&supe;</td><br><td>&amp;supe;</td><br><td>&amp;#8839;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&oplus;</td><br><td>&amp;oplus;</td><br><td>&amp;#8853;</td><br><td bgcolor="#F6F6F6" align="center">&otimes;</td><br><td>&amp;otimes;</td><br><td>&amp;#8855;</td><br><td bgcolor="#F6F6F6" align="center">&perp;</td><br><td>&amp;perp;</td><br><td>&amp;#8869;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&sdot;</td><br><td>&amp;sdot;</td><br><td>&amp;#8901;</td><br><td bgcolor="#F6F6F6" align="center">&lceil;</td><br><td>&amp;lceil;</td><br><td>&amp;#8968;</td><br><td bgcolor="#F6F6F6" align="center">&rceil;</td><br><td>&amp;rceil;</td><br><td>&amp;#8969;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&lfloor;</td><br><td>&amp;lfloor;</td><br><td>&amp;#8970;</td><br><td bgcolor="#F6F6F6" align="center">&rfloor;</td><br><td>&amp;rfloor;</td><br><td>&amp;#8971;</td><br><td bgcolor="#F6F6F6" align="center">&loz;</td><br><td>&amp;loz;</td><br><td>&amp;#9674;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&spades;</td><br><td>&amp;spades;</td><br><td>&amp;#9824;</td><br><td bgcolor="#F6F6F6" align="center">&clubs;</td><br><td>&amp;clubs;</td><br><td>&amp;#9827;</td><br><td bgcolor="#F6F6F6" align="center">&hearts;</td><br><td>&amp;hearts;</td><br><td>&amp;#9829;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&diams;</td><br><td>&amp;diams;</td><br><td>&amp;#9830;</td><br><td bgcolor="#F6F6F6" align="center">&nbsp;</td><br><td>&amp;nbsp;</td><br><td>&amp;#160;</td><br><td bgcolor="#F6F6F6" align="center">&iexcl;</td><br><td>&amp;iexcl;</td><br><td>&amp;#161;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&cent;</td><br><td>&amp;cent;</td><br><td>&amp;#162;</td><br><td bgcolor="#F6F6F6" align="center">&pound;</td><br><td>&amp;pound;</td><br><td>&amp;#163;</td><br><td bgcolor="#F6F6F6" align="center">&curren;</td><br><td>&amp;curren;</td><br><td>&amp;#164;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&yen;</td><br><td>&amp;yen;</td><br><td>&amp;#165;</td><br><td bgcolor="#F6F6F6" align="center">&brvbar;</td><br><td>&amp;brvbar;</td><br><td>&amp;#166;</td><br><td bgcolor="#F6F6F6" align="center">&sect;</td><br><td>&amp;sect;</td><br><td>&amp;#167;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&uml;</td><br><td>&amp;uml;</td><br><td>&amp;#168;</td><br><td bgcolor="#F6F6F6" align="center">&copy;</td><br><td>&amp;copy;</td><br><td>&amp;#169;</td><br><td bgcolor="#F6F6F6" align="center">&ordf;</td><br><td>&amp;ordf;</td><br><td>&amp;#170;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&laquo;</td><br><td>&amp;laquo;</td><br><td>&amp;#171;</td><br><td bgcolor="#F6F6F6" align="center">&not;</td><br><td>&amp;not;</td><br><td>&amp;#172;</td><br><td bgcolor="#F6F6F6" align="center">&shy;</td><br><td>&amp;shy;</td><br><td>&amp;#173;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&reg;</td><br><td>&amp;reg;</td><br><td>&amp;#174;</td><br><td bgcolor="#F6F6F6" align="center">&macr;</td><br><td>&amp;macr;</td><br><td>&amp;#175;</td><br><td bgcolor="#F6F6F6" align="center">&deg;</td><br><td>&amp;deg;</td><br><td>&amp;#176;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&plusmn;</td><br><td>&amp;plusmn;</td><br><td>&amp;#177;</td><br><td bgcolor="#F6F6F6" align="center">&sup2;</td><br><td>&amp;sup2;</td><br><td>&amp;#178;</td><br><td bgcolor="#F6F6F6" align="center">&sup3;</td><br><td>&amp;sup3;</td><br><td>&amp;#179;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&acute;</td><br><td>&amp;acute;</td><br><td>&amp;#180;</td><br><td bgcolor="#F6F6F6" align="center">&micro;</td><br><td>&amp;micro;</td><br><td>&amp;#181</td><br><td bgcolor="#F6F6F6" align="center">&quot;</td><br><td>&amp;quot;</td><br><td>&amp;#34;</td><br></tr><br><tr><br><td bgcolor="#F6F6F6" align="center">&lt;</td><br><td>&amp;lt;</td><br><td>&amp;#60;</td><br><td bgcolor="#F6F6F6" align="center">&gt;</td><br><td>&amp;gt;</td><br><td>&amp;#62;</td><br><td bgcolor="#F6F6F6" align="center">&#39;</td><br><td>&nbsp;</td><br><td>&amp;#39;</td><br></tr><br></table>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> htmlchar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些css常识</title>
      <link href="/2020/02/28/css-sense/"/>
      <url>/2020/02/28/css-sense/</url>
      
        <content type="html"><![CDATA[<h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><ul><li>不要使用过小的图片做背景平铺，宽高 1px 的图片平铺出一个宽高 200px 的区域，需要 200*200=40, 000 次，占用资源。</li><li>无边框。推荐的写法是 border:none;border:0; 只是定义边框宽度为零，但边框样式、颜色还是会被浏览器解析，占用资源</li><li>慎用 <em> 通配符， CSS 中的所有标签，不管用的不用的，过时的先进的，一视同仁被cue到，大大的占用资源。比如初始化时切忌用</em>，而是有选择的初始化标签</li><li>样式放头上，脚本放脚下。不内嵌，只外链</li><li>坚决不用 CSS 表达式</li><li>CSS 的十六进制颜色代码缩写。习惯了缩写及小写，这才知道，原来不是推荐的写法，为的是减少解析所占用的资源。但同时会增加文件体积。孰优孰劣，有待仔细考</li><li>使用 引用样式表，而不是通过@import 导入</li><li>一般来说，PNG 比 GIF 要小，小得多。再者，GIF 中有多少颜色是被浪费的，很值得优化</li><li>千万不要在 HTML 中缩放图片，一者不好看，二者占资源</li><li>正文字体最好用偶数，12px、14px、16px，效果非常好。特例，15px。</li></ul><hr><p>文章原链接 <a href="http://www.nowamagic.net/csszone/css_15CssCommon.php" target="_blank" rel="noopener">css的15个常识</a></p>]]></content>
      
      
      <categories>
          
          <category> html/css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html/css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础 - CSS选择器的权重与优先规则</title>
      <link href="/2020/02/28/css-priority/"/>
      <url>/2020/02/28/css-priority/</url>
      
        <content type="html"><![CDATA[<p>计算选择器的特殊性，首先把特殊性分为4个等级，每个等级代表一类选择器，每个等级的值为其所代表的的选择器的个数乘以这一等级的权重，最后把所有等级的值相加得出选择器的特殊值，4个等级的定义如下[^注意：通用选择器（*），子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以他们的权值都为0]：</p><ul><li>内联样式，如：style=””,权值为1000;</li><li>ID选择器，如：#content，权值为100;</li><li>类，伪类和属性选择器，如：.content，权值为10;</li><li>类型选择器和伪元素选择器，如：div p，权值为1;<br>举个板栗</li><li>ul#nav li.active a 权重值 = 113 = 1<em>100 + 1</em>10 + 3*1</li><li>#header #left ul li.first a = 213 = 1<em>100 + 1</em>100 + 1<em>1 + 1</em>1 + 1<em>10 + 1</em>1</li><li>#sidebar dl#code dd:first-letter = 212 = 2<em>100 + 2</em>1 + 1*10；</li><li><ul><li>= 0<br>具体例子如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">div</span><span class="selector-id">#main-content</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-id">#main-content</span>&gt;<span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-id">#content</span> <span class="selector-tag">div</span><span class="selector-attr">[id=<span class="string">"main-content"</span>]</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main-content</span> <span class="selector-tag">div</span><span class="selector-class">.paragraph</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main-content</span> <span class="selector-attr">[class=<span class="string">"paragraph"</span>]</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#main-content</span> <span class="selector-tag">div</span><span class="selector-class">.paragraph</span> <span class="selector-tag">h2</span><span class="selector-class">.first</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>第一个特殊性的值=2<em>100+2</em>1=202</li><li>第二个特殊性的值=2*100+1=201</li><li>第三个特殊性的值=1<em>100+1</em>10+3*1=113</li><li>第四个特殊性的值=1<em>100+1</em>10+2*1=112</li><li>第五个特殊性的值=1<em>100+1</em>10+1*1=111</li><li>第六个特殊性的值=1<em>100+2</em>10+3*1=123</li></ul><hr><p>原文链接<a href="http://www.nowamagic.net/csszone/css_SeletorPriorityRules.php" target="_blank" rel="noopener">css选择器权重</a></p>]]></content>
      
      
      <categories>
          
          <category> html/css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html/css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于emmet</title>
      <link href="/2020/02/28/emmet-base/"/>
      <url>/2020/02/28/emmet-base/</url>
      
        <content type="html"><![CDATA[<p>Emmet (前身为 Zen Coding)</p>]]></content>
      
      
      
        <tags>
            
            <tag> emmet </tag>
            
            <tag> 前端小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript冷知识</title>
      <link href="/2020/02/27/triva-of-javascript/"/>
      <url>/2020/02/27/triva-of-javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript冷知识、小trick"><a href="#javascript冷知识、小trick" class="headerlink" title="javascript冷知识、小trick"></a>javascript冷知识、小trick</h2><h3 id="浏览器地址栏运行JavaScript代码"><a href="#浏览器地址栏运行JavaScript代码" class="headerlink" title="浏览器地址栏运行JavaScript代码"></a>浏览器地址栏运行JavaScript代码</h3><ul><li>javascript:alert(‘hello from address bar :)’);</li><li>javascript:function generateRandomAlphaNum(len) {     var rdmString = “”;     for (; rdmString.length &lt; len; rdmString += Math.random().toString(36).substr(2));     return rdmString.substr(0, len); }document.write(generateRandomAlphaNum(parseInt(window.prompt(“输入字符长度”))));</li></ul><p>这样可以方便日常开发<strong>(需要注意的是如果是通过copy paste代码到浏览器地址栏的话，IE及Chrome会自动去掉代码开头的javascript:，所以需要手动添加起来才能正确执行，而Firefox中虽然不会自动去掉，但它根本就不支持在地址栏运行JS代码)</strong></p><hr><h3 id="浏览器地址栏运行HTML代码"><a href="#浏览器地址栏运行HTML代码" class="headerlink" title="浏览器地址栏运行HTML代码"></a>浏览器地址栏运行HTML代码</h3><ul><li>data:text/html,&lt;h1>Hello, world!&lt;/h1></li><li>data:text/html, <html contenteditable\> <strong><em>浏览器就变成了编辑器</em></strong> 等同于在控制台输出<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.contentEditable=<span class="string">'true'</span>;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="利用a标签自动解析URL"><a href="#利用a标签自动解析URL" class="headerlink" title="利用a标签自动解析URL"></a>利用a标签自动解析URL</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">a.href = <span class="string">'http://www.cnblogs.com/wayou/p/'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.host);</span><br></pre></td></tr></table></figure><p>利用这一原理，稍微扩展一下，就得到了一个更加健壮的解析URL各部分的通用方法了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =  <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    a.href = url;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        source: url,</span><br><span class="line">        protocol: a.protocol.replace(<span class="string">':'</span>,<span class="string">''</span>),</span><br><span class="line">        host: a.hostname,</span><br><span class="line">        port: a.port,</span><br><span class="line">        query: a.search,</span><br><span class="line">        params: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret = &#123;&#125;,</span><br><span class="line">                seg = a.search.replace(<span class="regexp">/^\?/</span>,<span class="string">''</span>).split(<span class="string">'&amp;'</span>),</span><br><span class="line">                len = seg.length, i = <span class="number">0</span>, s;</span><br><span class="line">            <span class="keyword">for</span> (;i&lt;len;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!seg[i]) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">                s = seg[i].split(<span class="string">'='</span>);</span><br><span class="line">                ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;)(),</span><br><span class="line">        file: (a.pathname.match(<span class="regexp">/\/([^\/?#]+)$/i</span>) || [,<span class="string">''</span>])[<span class="number">1</span>],</span><br><span class="line">        hash: a.hash.replace(<span class="string">'#'</span>,<span class="string">''</span>),</span><br><span class="line">        path: a.pathname.replace(<span class="regexp">/^([^\/])/</span>,<span class="string">'/$1'</span>),</span><br><span class="line">        relative: (a.href.match(<span class="regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [,<span class="string">''</span>])[<span class="number">1</span>],</span><br><span class="line">        segments: a.pathname.replace(<span class="regexp">/^\//</span>,<span class="string">''</span>).split(<span class="string">'/'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="页面拥有ID的元素会创建全局变量"><a href="#页面拥有ID的元素会创建全局变量" class="headerlink" title="页面拥有ID的元素会创建全局变量"></a>页面拥有ID的元素会创建全局变量</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sample"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sample);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加载CDN文件时，可以省掉HTTP标识"><a href="#加载CDN文件时，可以省掉HTTP标识" class="headerlink" title="加载CDN文件时，可以省掉HTTP标识"></a>加载CDN文件时，可以省掉HTTP标识</h3><p>现在很流行的CDN即从专门的服务器加载一些通用的JS和CSS文件，出于安全考虑有的CDN服务器使用HTTPS方式连接，而有的是传统的HTTP，其实我们在使用时可以忽略掉这个，将它从URL中省去。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//domain.com/path/to/script.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="利用script标签保存任意信息"><a href="#利用script标签保存任意信息" class="headerlink" title="利用script标签保存任意信息"></a>利用script标签保存任意信息</h3><p>将script标签设置为type=’text’然后可以在里面保存任意信息，之后可以在JavaScript代码中很方便地获取。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"template"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This won't display<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">var text = document.getElementById('template').innerHTML</span><br></pre></td></tr></table></figure></p><h3 id="不见的鼠标"><a href="#不见的鼠标" class="headerlink" title="不见的鼠标"></a>不见的鼠标</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: none<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的文字模糊效果"><a href="#简单的文字模糊效果" class="headerlink" title="简单的文字模糊效果"></a>简单的文字模糊效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#111</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><p>当然你可以将容器设置为display:table，然后将子元素也就是要垂直居中显示的元素设置为display:table-cell，然后加上vertical-align:middle来实现，但此种实现往往会因为display：table而破坏整体布局，那还不如直接用table标签了呢。</p><p>下面这个样式利用了translate来巧妙实现了垂直居中样式，需IE9+。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-vertical</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-horizontal</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">18px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">24px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实时编辑CSS"><a href="#实时编辑CSS" class="headerlink" title="实时编辑CSS"></a>实时编辑CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">style</span>=<span class="string">"display:block"</span> <span class="attr">contentEditable</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123; <span class="attribute">color</span>: blue &#125;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建长宽比固定的元素"><a href="#创建长宽比固定的元素" class="headerlink" title="创建长宽比固定的元素"></a>创建长宽比固定的元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100%; position: relative; padding-bottom: 20%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: absolute; left: 0; top: 0; right: 0; bottom: 0;"</span>&gt;</span></span><br><span class="line">        this content will have a constant aspect ratio that varies based on the width.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>###CSS中也可以做简单运算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">50px</span>) <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h3><p>利用了toString方法可以接收一个基数作为参数的原理，这个基数从2到36封顶。如果不指定，默认基数是10进制。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomAlphaNum</span>(<span class="params">len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rdmString = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (; rdmString.length &lt; len; rdmString += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> rdmString.substr(<span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="整数的操作"><a href="#整数的操作" class="headerlink" title="整数的操作"></a>整数的操作</h3><p>JavaScript中是没有整型概念的，但利用好位操作符可以轻松处理，同时获得效率上的提升。|0和~~是很好的一个例子，使用这两者可以将浮点转成整型且效率方面要比同类的parseInt,Math.round 要快。在处理像素及动画位移等效果的时候会很有用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="number">12.4</span> / <span class="number">4.13</span>) | <span class="number">0</span>;<span class="comment">//结果为3</span></span><br><span class="line"><span class="keyword">var</span> bar = ~~(<span class="number">12.4</span> / <span class="number">4.13</span>);<span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure><br>!!将一个值方便快速转化为布尔值</p><h3 id="重写原生浏览器方法以实现新功能"><a href="#重写原生浏览器方法以实现新功能" class="headerlink" title="重写原生浏览器方法以实现新功能"></a>重写原生浏览器方法以实现新功能</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldAlert = <span class="built_in">window</span>.alert,</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        oldAlert(a + <span class="string">"\n You've called alert "</span> + count + <span class="string">" times now. Stop, it's evil!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">alert(<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure><p>重写console<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _log = <span class="built_in">console</span>.log;</span><br><span class="line"><span class="built_in">console</span>.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  _log.call(<span class="built_in">console</span>, <span class="string">'%c'</span> + [].slice.call(<span class="built_in">arguments</span>).join(<span class="string">' '</span>), <span class="string">'color:transparent;text-shadow:0 0 2px rgba(0,0,0,.5);'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="不声明第三个变量的值交换"><a href="#不声明第三个变量的值交换" class="headerlink" title="不声明第三个变量的值交换"></a>不声明第三个变量的值交换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>,b=<span class="number">2</span>;a=[b,b=a][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h3 id="If语句的变形"><a href="#If语句的变形" class="headerlink" title="If语句的变形"></a>If语句的变形</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> day=(<span class="keyword">new</span> <span class="built_in">Date</span>).getDay()===<span class="number">0</span>;</span><br><span class="line"><span class="comment">//传统if语句</span></span><br><span class="line"><span class="keyword">if</span> (day) &#123;</span><br><span class="line">alert(<span class="string">'Today is Sunday!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//运用逻辑与代替if</span></span><br><span class="line">day&amp;&amp;alert(<span class="string">'Today is Sunday!'</span>);</span><br></pre></td></tr></table></figure><p>对于传统的if语句，如果执行体代码超过了1 条语句，则需要加花括号，而利用逗号表达式，可以执行任意条代码而不用加花括号。<strong>(不推荐)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(conditoin) alert(1),alert(2),console.log(3);</span><br></pre></td></tr></table></figure></p><h3 id="禁止别人以iframe加载你的页面"><a href="#禁止别人以iframe加载你的页面" class="headerlink" title="禁止别人以iframe加载你的页面"></a>禁止别人以iframe加载你的页面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.location != <span class="built_in">window</span>.parent.location) <span class="built_in">window</span>.parent.location = <span class="built_in">window</span>.location;</span><br></pre></td></tr></table></figure><h3 id="console-table-Chrome专属，IE绕道的console方法。"><a href="#console-table-Chrome专属，IE绕道的console方法。" class="headerlink" title="console.table(Chrome专属，IE绕道的console方法。)"></a>console.table<strong>(Chrome专属，IE绕道的console方法。)</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;<span class="string">'品名'</span>: <span class="string">'香蕉'</span>, <span class="string">'数量'</span>: <span class="number">4</span>&#125;, &#123;<span class="string">'品名'</span>: <span class="string">'苹果'</span>, <span class="string">'数量'</span>: <span class="number">3</span>&#125;];</span><br><span class="line"><span class="built_in">console</span>.table(data);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端小技巧 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack基本命令</title>
      <link href="/2020/02/25/wepack-base-command/"/>
      <url>/2020/02/25/wepack-base-command/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 脚手架工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本命令</title>
      <link href="/2020/02/24/hello-world/"/>
      <url>/2020/02/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
